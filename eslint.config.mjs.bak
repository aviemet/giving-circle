import { fixupConfigRules, fixupPluginRules } from "@eslint/compat";
import react from "eslint-plugin-react";
import typescriptEslint from "@typescript-eslint/eslint-plugin";
import _import from "eslint-plugin-import";
import jsonc from "eslint-plugin-jsonc";
import globals from "globals";
import tsParser from "@typescript-eslint/parser";
import parser from "jsonc-eslint-parser";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default [{
    ignores: ["app/javascript/**/*"],
}, ...fixupConfigRules(compat.extends(
    "plugin:react/recommended",
    "plugin:import/typescript",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:jsonc/recommended-with-jsonc",
)), {
    plugins: {
        react: fixupPluginRules(react),
        "@typescript-eslint": typescriptEslint,
        import: fixupPluginRules(_import),
        jsonc: fixupPluginRules(jsonc),
    },

    languageOptions: {
        globals: {
            ...globals.browser,
            ...globals.node,
        },

        parser: tsParser,
        ecmaVersion: "latest",
        sourceType: "module",

        parserOptions: {
            ecmaFeatures: {
                jsx: true,
            },

            requireConfigFile: false,
        },
    },

    settings: {
        react: {
            version: "detect",
        },

        "import/resolver": {
            typescript: {},
        },

        "jsx-a11y": {
            polymorphicPropName: "component",
        },
    },

    rules: {
        indent: "off",

        "@typescript-eslint/indent": ["error", "tab", {
            SwitchCase: 1,
            VariableDeclarator: "first",
            MemberExpression: 1,
            ArrayExpression: 1,
            ignoredNodes: ["TSTypeParameterInstantiation"],
        }],

        "@typescript-eslint/member-delimiter-style": ["error", {
            multiline: {
                delimiter: "none",
            },

            singleline: {
                delimiter: "comma",
            },

            multilineDetection: "brackets",
        }],

        "linebreak-style": ["error", "unix"],
        quotes: ["error", "single"],
        semi: ["error", "never"],

        "no-unused-vars": ["warn", {
            vars: "all",
            args: "none",
        }],

        "no-prototype-builtins": [0],
        "space-infix-ops": ["error"],
        "no-trailing-spaces": "error",

        "object-curly-spacing": [2, "always", {
            objectsInObjects: true,
        }],

        "computed-property-spacing": 2,
        "array-bracket-spacing": 0,

        "brace-style": ["error", "1tbs", {
            allowSingleLine: true,
        }],

        "react/boolean-prop-naming": ["error"],
        "react/no-typos": ["error"],

        "react/jsx-curly-spacing": ["error", {
            when: "always",
            children: true,
        }],

        "react/jsx-tag-spacing": ["error", {
            closingSlash: "never",
            beforeSelfClosing: "always",
            afterOpening: "never",
            beforeClosing: "allow",
        }],

        "react/display-name": ["off"],
        "react/prop-types": 0,
        eqeqeq: "error",
        "no-console": "warn",
        "eol-last": ["error", "always"],

        "@typescript-eslint/keyword-spacing": [2, {
            after: true,
            before: true,

            overrides: {
                if: {
                    after: false,
                },

                for: {
                    after: false,
                },

                while: {
                    after: false,
                },

                switch: {
                    after: false,
                },

                catch: {
                    after: false,
                },
            },
        }],

        "comma-dangle": ["error", "always-multiline"],
        "react-hooks/exhaustive-deps": 0,
    },
}, {
    files: ["**/*.d.ts"],

    rules: {
        "no-unused-vars": "off",
        "@typescript-eslint/member-delimiter-style": "off",
        "@typescript-eslint/indent": "off",
    },
}, {
    files: ["**/*.json", "**/*.jsonc"],

    languageOptions: {
        parser: parser,
    },

    rules: {
        "jsonc/indent": ["error", 2, {
            ignoredNodes: ["Property"],
        }],
    },
}];