/**
 * @file Generated by js-routes 2.3.5. Based on Rails 8.0.3 routes of GivingCircle::Application.
 * @version e172e08bfa75cb798557bfd80f05114fcc4d9fa918715d1fdb993e8b968ee78d
 * @see https://github.com/railsware/js-routes
 */
declare type Optional<T> = {
    [P in keyof T]?: T[P] | null;
};
declare type Collection<T> = Record<string, T>;
declare type BaseRouteParameter = string | boolean | Date | number | bigint;
declare type MethodRouteParameter = BaseRouteParameter | (() => BaseRouteParameter);
declare type ModelRouteParameter = {
    id: MethodRouteParameter;
} | {
    to_param: MethodRouteParameter;
} | {
    toParam: MethodRouteParameter;
};
declare type RequiredRouteParameter = BaseRouteParameter | ModelRouteParameter;
declare type OptionalRouteParameter = undefined | null | RequiredRouteParameter;
declare type QueryRouteParameter = OptionalRouteParameter | QueryRouteParameter[] | {
    [k: string]: QueryRouteParameter;
};
declare type RouteParameters = Collection<QueryRouteParameter>;
declare type Serializable = Collection<unknown>;
declare type Serializer = (value: Serializable) => string;
declare type RouteHelperExtras = {
    requiredParams(): string[];
    toString(): string;
};
declare type RequiredParameters<T extends number> = T extends 1 ? [RequiredRouteParameter] : T extends 2 ? [RequiredRouteParameter, RequiredRouteParameter] : T extends 3 ? [RequiredRouteParameter, RequiredRouteParameter, RequiredRouteParameter] : T extends 4 ? [
    RequiredRouteParameter,
    RequiredRouteParameter,
    RequiredRouteParameter,
    RequiredRouteParameter
] : RequiredRouteParameter[];
declare type RouteHelperOptions = RouteOptions & Collection<OptionalRouteParameter>;
declare type RouteHelper<T extends number = number> = ((...args: [...RequiredParameters<T>, RouteHelperOptions]) => string) & RouteHelperExtras;
declare type RouteHelpers = Collection<RouteHelper>;
declare type Configuration = {
    prefix: string;
    default_url_options: RouteParameters;
    special_options_key: string;
    serializer: Serializer;
};
interface RouterExposedMethods {
    config(): Configuration;
    configure(arg: Partial<Configuration>): Configuration;
    serialize: Serializer;
}
declare type KeywordUrlOptions = Optional<{
    host: string;
    protocol: string;
    subdomain: string;
    port: string | number;
    anchor: string;
    trailing_slash: boolean;
    script_name: string;
    params: RouteParameters;
}>;
declare type RouteOptions = KeywordUrlOptions & RouteParameters;
declare type PartsTable = Collection<{
    r?: boolean;
    d?: OptionalRouteParameter;
}>;
declare type ModuleType = "CJS" | "AMD" | "UMD" | "ESM" | "DTS" | "NIL";
declare const RubyVariables: {
    PREFIX: string;
    DEPRECATED_FALSE_PARAMETER_BEHAVIOR: boolean;
    SPECIAL_OPTIONS_KEY: string;
    DEFAULT_URL_OPTIONS: RouteParameters;
    SERIALIZER: Serializer;
    ROUTES_OBJECT: RouteHelpers;
    MODULE_TYPE: ModuleType;
    WRAPPER: <T>(callback: T) => T;
};
declare const define: undefined | (((arg: unknown[], callback: () => unknown) => void) & {
    amd?: unknown;
});
declare const module: {
    exports: unknown;
} | undefined;
export const configure: RouterExposedMethods['configure'];

export const config: RouterExposedMethods['config'];

export const serialize: RouterExposedMethods['serialize'];

/**
 * Generates rails route to
 * /:circle_slug/about(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const aboutCircle: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/orgs/:slug/about(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const aboutOrg: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:slug/about(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const aboutTheme: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:slug(.:format)
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircle: ((
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/mock(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleMock: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/presentations/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCirclePresentation: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/presentations/:presentation_slug/slides/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCirclePresentationSlide: ((
  circleSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/presentations/:presentation_slug/slides(.:format)
 * @param {any} circleSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCirclePresentationSlides: ((
  circleSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/presentations(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCirclePresentations: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/templates/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleTemplate: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/templates/:template_slug/slides/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} templateSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleTemplateSlide: ((
  circleSlug: RequiredRouteParameter,
  templateSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/templates/:template_slug/slides(.:format)
 * @param {any} circleSlug
 * @param {any} templateSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleTemplateSlides: ((
  circleSlug: RequiredRouteParameter,
  templateSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/templates(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleTemplates: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/themes/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleTheme: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/themes(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircleThemes: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiCircles: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/searches(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiSearches: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/spotlights(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiSpotlights: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/users/:id/update_table_preferences(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiUpdateTablePreferences: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/users/:id/update_user_preferences(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiUpdateUserPreferences: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/users/:id(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiUser: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/users(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const apiUsers: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/cancel(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const cancelUserRegistration: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circle: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/memberships(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleMemberships: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/orgs(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleOrgs: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/p/:presentation_slug(.:format)
 * @param {any} circleSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circlePublicPresentation: ((
  circleSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/templates/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleTemplate: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/templates(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleTemplates: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/templates/:template_slug/slides(.:format)
 * @param {any} circleSlug
 * @param {any} templateSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleTemplatesCreateSlide: ((
  circleSlug: RequiredRouteParameter,
  templateSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/templates/:template_slug/slides/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} templateSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleTemplatesEditSlide: ((
  circleSlug: RequiredRouteParameter,
  templateSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circleThemes: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /circles(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const circles: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /logout(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const destroyUserSession: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/edit(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editCircle: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/templates/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editCircleTemplate: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/memberships/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editMembership: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/orgs/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editOrg: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editTheme: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/elements/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editThemeElement: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interactions/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editThemeInteraction: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interaction_responses/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editThemeInteractionResponse: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/orgs/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editThemeOrg: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editThemePresentation: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/slides/:slug/edit(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editThemePresentationSlide: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/:id/edit(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editUser: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/password/edit(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editUserPassword: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/edit(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editUserRegistration: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const home: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/memberships/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const membership: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /circles/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newCircle: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/memberships/new(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newCircleMembership: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/orgs/new(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newCircleOrg: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/templates/new(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newCircleTemplate: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/new(.:format)
 * @param {any} circleSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newCircleTheme: ((
  circleSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/elements/new(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newThemeElement: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interactions/new(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newThemeInteraction: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interaction_responses/new(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newThemeInteractionResponse: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/orgs/new(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newThemeOrg: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/new(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newThemePresentation: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/slides/new(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newThemePresentationSlide: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newUser: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/confirmation/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newUserConfirmation: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/password/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newUserPassword: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/register(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newUserRegistration: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /login(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newUserSession: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/unlock/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newUserUnlock: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/orgs/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const org: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const root: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /settings(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const settings: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /settings/appearance(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const settingsAppearance: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /settings/general(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const settingsGeneral: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /settings/integrations(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const settingsIntegrations: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /settings/localizations(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const settingsLocalizations: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /settings/notifications(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const settingsNotifications: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/presentations/:slug/sync_slides(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const syncSlidesApiCirclePresentation: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const theme: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/elements/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeElement: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/elements(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeElements: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interactions/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeInteraction: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interaction_responses/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeInteractionResponse: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interaction_responses(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeInteractionResponses: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/interactions(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeInteractions: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/orgs/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeOrg: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/orgs(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeOrgs: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/orgs/import(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themeOrgsImport: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentation: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/activate(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationActivate: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/admin(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationControls: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/admin/members(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationMembers: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/admin/messaging(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationMessaging: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/admin/overview(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationOverview: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/admin/settings(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationSettings: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/slides/:slug(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationSlide: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations/:presentation_slug/slides(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {any} presentationSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentationSlides: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  presentationSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /:circle_slug/themes/:theme_slug/presentations(.:format)
 * @param {any} circleSlug
 * @param {any} themeSlug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const themePresentations: ((
  circleSlug: RequiredRouteParameter,
  themeSlug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/disk/:encoded_token(.:format)
 * @param {any} encodedToken
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const updateRailsDiskService: ((
  encodedToken: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /api/circles/:circle_slug/templates/:slug/upload_image(.:format)
 * @param {any} circleSlug
 * @param {any} slug
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const uploadImageApiCircleTemplate: ((
  circleSlug: RequiredRouteParameter,
  slug: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/:id(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const user: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/confirmation(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const userConfirmation: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/password(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const userPassword: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const userRegistration: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /login(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const userSession: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users/unlock(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const userUnlock: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /users(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const users: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

// By some reason this line prevents all types in a file
// from being automatically exported
export {};
