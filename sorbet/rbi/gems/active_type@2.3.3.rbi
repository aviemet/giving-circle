# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_type` gem.
# Please instead update this file by running `bin/tapioca gem active_type`.

# source://active_type//lib/active_type/version.rb#1
module ActiveType
  extend ::ActiveSupport::Autoload
  extend ::ActiveType::Util
end

# source://active_type//lib/active_type/virtual_attributes.rb#7
class ActiveType::ArgumentError < ::ArgumentError; end

# source://active_type//lib/active_type/change_association.rb#3
module ActiveType::ChangeAssociation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveType::ChangeAssociation::ClassMethods
end

# source://active_type//lib/active_type/change_association.rb#7
module ActiveType::ChangeAssociation::ClassMethods
  # source://active_type//lib/active_type/change_association.rb#9
  def change_association(association_name, new_scope, new_options = T.unsafe(nil)); end
end

# source://active_type//lib/active_type/virtual_attributes.rb#5
class ActiveType::InvalidAttributeNameError < ::StandardError; end

# source://active_type//lib/active_type/virtual_attributes.rb#6
class ActiveType::MissingAttributeError < ::StandardError; end

# source://active_type//lib/active_type/mutation_after_cast_error.rb#3
class ActiveType::MutationAfterCastError < ::StandardError; end

# source://active_type//lib/active_type/nested_attributes/association.rb#5
module ActiveType::NestedAttributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveType::NestedAttributes::ClassMethods
end

# source://active_type//lib/active_type/nested_attributes/nests_one_association.rb#7
class ActiveType::NestedAttributes::AssignmentError < ::StandardError; end

# source://active_type//lib/active_type/nested_attributes/association.rb#9
class ActiveType::NestedAttributes::Association
  # @return [Association] a new instance of Association
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#11
  def initialize(owner, target_name, options = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#30
  def assign_attributes(parent, attributes); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#34
  def save(parent); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#47
  def validate(parent); end

  private

  # @raise [NotImplementedError]
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#55
  def add_child(parent, child_or_children); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#132
  def add_errors_to_parent(parent, child, index); end

  # @raise [NotImplementedError]
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#63
  def assign_children(parent, children); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#59
  def assigned_children(parent); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#71
  def build_child(parent, attributes); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#79
  def build_scope(parent); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#67
  def changed_children(parent); end

  # @raise [NotImplementedError]
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#95
  def derive_class_name; end

  # source://active_type//lib/active_type/nested_attributes/association.rb#99
  def fetch_child(parent, id); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#83
  def find_scope(parent); end

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#116
  def reject?(parent, attributes); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#75
  def scope(parent); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#87
  def scope_for(parent, key); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#147
  def translate_error_attribute(attribute, index); end

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/nested_attributes/association.rb#111
  def truthy?(value); end

  # source://active_type//lib/active_type/nested_attributes/association.rb#128
  def valid_options; end
end

# source://active_type//lib/active_type/nested_attributes/builder.rb#8
class ActiveType::NestedAttributes::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://active_type//lib/active_type/nested_attributes/builder.rb#10
  def initialize(owner, mod); end

  # source://active_type//lib/active_type/nested_attributes/builder.rb#15
  def build(name, one_or_many, options); end

  private

  # source://active_type//lib/active_type/nested_attributes/builder.rb#30
  def add_attribute(name, options); end

  # source://active_type//lib/active_type/nested_attributes/builder.rb#43
  def add_autosave(name, association); end

  # source://active_type//lib/active_type/nested_attributes/builder.rb#53
  def add_validation(name, association); end

  # source://active_type//lib/active_type/nested_attributes/builder.rb#34
  def add_writer_method(name, association); end

  # source://active_type//lib/active_type/nested_attributes/builder.rb#26
  def build_association(name, singular, options); end
end

# source://active_type//lib/active_type/nested_attributes.rb#13
module ActiveType::NestedAttributes::ClassMethods
  # source://active_type//lib/active_type/nested_attributes.rb#19
  def nests_many(association_name, options = T.unsafe(nil)); end

  # source://active_type//lib/active_type/nested_attributes.rb#15
  def nests_one(association_name, options = T.unsafe(nil)); end

  private

  # source://active_type//lib/active_type/nested_attributes.rb#26
  def generated_nested_attribute_methods; end
end

# source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#7
class ActiveType::NestedAttributes::NestsManyAssociation < ::ActiveType::NestedAttributes::Association
  # source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#9
  def assign_attributes(parent, attributes_collection); end

  private

  # source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#51
  def add_child(parent, child); end

  # source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#55
  def add_children(parent, children); end

  # source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#59
  def assign_children(parent, children); end

  # source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#63
  def derive_class_name; end

  # source://active_type//lib/active_type/nested_attributes/nests_many_association.rb#67
  def valid_options; end
end

# source://active_type//lib/active_type/nested_attributes/nests_one_association.rb#9
class ActiveType::NestedAttributes::NestsOneAssociation < ::ActiveType::NestedAttributes::Association
  # source://active_type//lib/active_type/nested_attributes/nests_one_association.rb#11
  def assign_attributes(parent, attributes); end

  private

  # source://active_type//lib/active_type/nested_attributes/nests_one_association.rb#44
  def add_child(parent, child); end

  # source://active_type//lib/active_type/nested_attributes/nests_one_association.rb#48
  def assign_children(parent, children); end

  # source://active_type//lib/active_type/nested_attributes/nests_one_association.rb#52
  def derive_class_name; end
end

# source://active_type//lib/active_type/nested_attributes/association.rb#7
class ActiveType::NestedAttributes::RecordNotFound < ::ActiveRecord::RecordNotFound; end

# Rails 5+
#
# source://active_type//lib/active_type/no_table.rb#95
module ActiveType::NoTable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveType::NoTable::ClassMethods

  # source://active_type//lib/active_type/no_table.rb#153
  def destroy; end

  # source://active_type//lib/active_type/no_table.rb#158
  def reload; end

  private

  # source://active_type//lib/active_type/no_table.rb#173
  def _create_record(*_arg0); end

  # source://active_type//lib/active_type/no_table.rb#178
  def _update_record(*_arg0); end

  # source://active_type//lib/active_type/no_table.rb#165
  def create(*_arg0); end

  # source://active_type//lib/active_type/no_table.rb#169
  def update(*_arg0); end
end

# source://active_type//lib/active_type/no_table.rb#129
module ActiveType::NoTable::ClassMethods
  # source://active_type//lib/active_type/no_table.rb#147
  def _query_by_sql(*_arg0); end

  # source://active_type//lib/active_type/no_table.rb#131
  def connection; end

  # source://active_type//lib/active_type/no_table.rb#135
  def destroy(*_arg0); end

  # source://active_type//lib/active_type/no_table.rb#139
  def destroy_all(*_arg0); end

  # source://active_type//lib/active_type/no_table.rb#143
  def find_by_sql(*_arg0); end
end

# source://active_type//lib/active_type/no_table.rb#118
class ActiveType::NoTable::DummyConnection < ::ActiveRecord::ConnectionAdapters::AbstractAdapter
  # @return [DummyConnection] a new instance of DummyConnection
  #
  # source://active_type//lib/active_type/no_table.rb#122
  def initialize(*_arg0); end

  # Returns the value of attribute schema_cache.
  #
  # source://active_type//lib/active_type/no_table.rb#120
  def schema_cache; end
end

# source://active_type//lib/active_type/no_table.rb#99
class ActiveType::NoTable::DummySchemaCache
  # source://active_type//lib/active_type/no_table.rb#113
  def clear_data_source_cache!(table_name); end

  # source://active_type//lib/active_type/no_table.rb#101
  def columns_hash(table_name); end

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/no_table.rb#105
  def columns_hash?(table_name); end

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/no_table.rb#109
  def data_source_exists?(table_name); end
end

# source://active_type//lib/active_type/not_castable_error.rb#3
class ActiveType::NotCastableError < ::StandardError; end

# source://active_type//lib/active_type/object.rb#7
class ActiveType::Object < ::ActiveRecord::Base
  include ::ActiveType::Object::GeneratedAttributeMethods
  include ::ActiveType::Object::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  include ::ActiveType::NoTable
  include ::ActiveType::VirtualAttributes
  include ::ActiveType::VirtualAttributes::Serialization
  include ::ActiveType::NestedAttributes
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::ActiveType::NoTable::ClassMethods
  extend ::ActiveType::VirtualAttributes::ClassMethods
  extend ::ActiveType::NestedAttributes::ClassMethods

  # source://active_type//lib/active_type/nested_attributes.rb#10
  def _nested_attribute_scopes; end

  # source://active_type//lib/active_type/nested_attributes.rb#10
  def _nested_attribute_scopes=(_arg0); end

  # source://active_type//lib/active_type/virtual_attributes.rb#134
  def virtual_columns_hash; end

  # source://active_type//lib/active_type/virtual_attributes.rb#134
  def virtual_columns_hash=(_arg0); end

  # source://active_type//lib/active_type/virtual_attributes.rb#134
  def virtual_columns_hash?; end

  class << self
    # source://activemodel/7.1.2/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.2/lib/active_record/attributes.rb#208
    def ar_attribute(name, cast_type = T.unsafe(nil), default: T.unsafe(nil), **options); end

    # source://active_type//lib/active_type/virtual_attributes.rb#335
    def attribute(name, *args); end

    # source://activerecord/7.1.2/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://active_type//lib/active_type/virtual_attributes.rb#134
    def virtual_columns_hash; end

    # source://active_type//lib/active_type/virtual_attributes.rb#134
    def virtual_columns_hash=(value); end

    # source://active_type//lib/active_type/virtual_attributes.rb#134
    def virtual_columns_hash?; end
  end
end

# source://active_type//lib/active_type/object.rb#0
module ActiveType::Object::GeneratedAssociationMethods; end

# source://active_type//lib/active_type/object.rb#0
module ActiveType::Object::GeneratedAttributeMethods; end

# source://active_type//lib/active_type/record.rb#8
class ActiveType::Record < ::ActiveRecord::Base
  include ::ActiveType::Record::GeneratedAttributeMethods
  include ::ActiveType::Record::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  include ::ActiveType::VirtualAttributes
  include ::ActiveType::VirtualAttributes::Serialization
  include ::ActiveType::NestedAttributes
  include ::ActiveType::RecordExtension
  include ::ActiveType::ChangeAssociation
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::ActiveType::VirtualAttributes::ClassMethods
  extend ::ActiveType::NestedAttributes::ClassMethods
  extend ::ActiveType::RecordExtension::ClassMethods
  extend ::ActiveType::ChangeAssociation::ClassMethods

  # source://active_type//lib/active_type/nested_attributes.rb#10
  def _nested_attribute_scopes; end

  # source://active_type//lib/active_type/nested_attributes.rb#10
  def _nested_attribute_scopes=(_arg0); end

  # source://active_type//lib/active_type/virtual_attributes.rb#134
  def virtual_columns_hash; end

  # source://active_type//lib/active_type/virtual_attributes.rb#134
  def virtual_columns_hash=(_arg0); end

  # source://active_type//lib/active_type/virtual_attributes.rb#134
  def virtual_columns_hash?; end

  class << self
    # source://activemodel/7.1.2/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.2/lib/active_record/attributes.rb#208
    def ar_attribute(name, cast_type = T.unsafe(nil), default: T.unsafe(nil), **options); end

    # source://active_type//lib/active_type/virtual_attributes.rb#335
    def attribute(name, *args); end

    # source://activerecord/7.1.2/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://active_type//lib/active_type/virtual_attributes.rb#134
    def virtual_columns_hash; end

    # source://active_type//lib/active_type/virtual_attributes.rb#134
    def virtual_columns_hash=(value); end

    # source://active_type//lib/active_type/virtual_attributes.rb#134
    def virtual_columns_hash?; end
  end
end

# source://active_type//lib/active_type/record.rb#0
module ActiveType::Record::GeneratedAssociationMethods; end

# source://active_type//lib/active_type/record.rb#0
module ActiveType::Record::GeneratedAttributeMethods; end

# source://active_type//lib/active_type/record_extension/inheritance.rb#3
module ActiveType::RecordExtension
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveType::RecordExtension::ClassMethods
end

# source://active_type//lib/active_type/record_extension.rb#9
module ActiveType::RecordExtension::ClassMethods
  # source://active_type//lib/active_type/record_extension.rb#11
  def [](base); end
end

# source://active_type//lib/active_type/record_extension/inheritance.rb#5
module ActiveType::RecordExtension::Inheritance
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveType::RecordExtension::Inheritance::ClassMethods

  class << self
    # source://active_type//lib/active_type/record_extension/inheritance.rb#13
    def add_foreign_key_option(extended_record_base_class, scope = T.unsafe(nil), options = T.unsafe(nil)); end
  end

  module GeneratedClassMethods
    def extended_record_base_class; end
    def extended_record_base_class=(value); end
    def extended_record_base_class?; end
  end

  module GeneratedInstanceMethods
    def extended_record_base_class; end
    def extended_record_base_class=(value); end
    def extended_record_base_class?; end
  end
end

# source://active_type//lib/active_type/record_extension/inheritance.rb#28
module ActiveType::RecordExtension::Inheritance::ClassMethods
  # @return [Boolean]
  #
  # source://active_type//lib/active_type/record_extension/inheritance.rb#63
  def descends_from_active_record?; end

  # source://active_type//lib/active_type/record_extension/inheritance.rb#67
  def has_many(name, scope = T.unsafe(nil), *args, &extension); end

  # source://active_type//lib/active_type/record_extension/inheritance.rb#76
  def has_one(name, scope = T.unsafe(nil), *args, &extension); end

  # source://active_type//lib/active_type/record_extension/inheritance.rb#30
  def model_name; end

  # source://active_type//lib/active_type/record_extension/inheritance.rb#51
  def module_ancestors; end

  # source://active_type//lib/active_type/record_extension/inheritance.rb#59
  def sti_name; end

  private

  # Rails 5 find_sti_class does a sanity check for proper inheritance that fails for
  # our usecase
  # copied from activerecord/lib/active_record/inheritance.rb
  #
  # source://active_type//lib/active_type/record_extension/inheritance.rb#119
  def find_sti_class(type_name); end
end

# source://active_type//lib/active_type/type_caster.rb#2
class ActiveType::TypeCaster
  # @return [TypeCaster] a new instance of TypeCaster
  #
  # source://active_type//lib/active_type/type_caster.rb#15
  def initialize(type, native_caster); end

  # source://active_type//lib/active_type/type_caster.rb#33
  def native_type_cast_from_user(value); end

  # source://active_type//lib/active_type/type_caster.rb#20
  def type_cast_from_user(value); end

  private

  # source://active_type//lib/active_type/type_caster.rb#39
  def cast_integer(value); end

  # source://active_type//lib/active_type/type_caster.rb#47
  def cast_time(value); end

  class << self
    # source://active_type//lib/active_type/type_caster.rb#4
    def get(type); end
  end
end

# source://active_type//lib/active_type/type_caster.rb#67
module ActiveType::TypeCaster::NativeCasters; end

# Adapter for Rails 3.0 - 4.1.
# In these versions, casting logic lives in ActiveRecord::ConnectionAdapters::Column
#
# source://active_type//lib/active_type/type_caster.rb#71
class ActiveType::TypeCaster::NativeCasters::DelegateToColumn
  # @return [DelegateToColumn] a new instance of DelegateToColumn
  #
  # source://active_type//lib/active_type/type_caster.rb#73
  def initialize(type); end

  # source://active_type//lib/active_type/type_caster.rb#81
  def type_cast_from_user(value); end
end

# Adapter for Rails 4.2+.
# In these versions, casting logic lives in subclasses of ActiveRecord::Type::Value
#
# source://active_type//lib/active_type/type_caster.rb#89
class ActiveType::TypeCaster::NativeCasters::DelegateToRails4Type
  # @return [DelegateToRails4Type] a new instance of DelegateToRails4Type
  #
  # source://active_type//lib/active_type/type_caster.rb#91
  def initialize(type); end

  # source://active_type//lib/active_type/type_caster.rb#99
  def type_cast_from_user(value); end
end

# Adapter for Rails 5+.
# In these versions, casting logic lives in subclasses of ActiveRecord::Type::Value
#
# source://active_type//lib/active_type/type_caster.rb#107
class ActiveType::TypeCaster::NativeCasters::DelegateToRails5Type
  # @return [DelegateToRails5Type] a new instance of DelegateToRails5Type
  #
  # source://active_type//lib/active_type/type_caster.rb#109
  def initialize(type); end

  # source://active_type//lib/active_type/type_caster.rb#113
  def type_cast_from_user(value); end

  private

  # source://active_type//lib/active_type/type_caster.rb#119
  def lookup(type); end
end

# source://active_type//lib/active_type/util/unmutable_attributes.rb#4
module ActiveType::Util
  extend ::ActiveType::Util

  # source://active_type//lib/active_type/util.rb#7
  def cast(object, klass, force: T.unsafe(nil)); end

  # source://active_type//lib/active_type/util.rb#17
  def scoped(klass_or_relation); end

  private

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/util.rb#76
  def associations_touched?(record); end

  # source://active_type//lib/active_type/util.rb#23
  def cast_record(record, klass, force: T.unsafe(nil)); end

  # source://active_type//lib/active_type/util.rb#72
  def cast_relation(relation, klass); end

  # source://active_type//lib/active_type/util.rb#84
  def make_record_unusable(record); end

  # Backport for Rails 3.2
  #
  # @return [Boolean]
  #
  # source://active_type//lib/active_type/util.rb#67
  def using_single_table_inheritance?(klass, record); end
end

# This object is used as a substitute for a record's @attributes.
# Reading from the original @attributes is still allowed, to enable
# `#inspect` and similar functions.
# But the @attributes can no longer be mutated and will raise instead.
#
# source://active_type//lib/active_type/util/unmutable_attributes.rb#10
class ActiveType::Util::UnmutableAttributes
  # @return [UnmutableAttributes] a new instance of UnmutableAttributes
  #
  # source://active_type//lib/active_type/util/unmutable_attributes.rb#14
  def initialize(attributes); end

  # source://active_type//lib/active_type/util/unmutable_attributes.rb#22
  def [](key); end

  # source://active_type//lib/active_type/util/unmutable_attributes.rb#18
  def fetch_value(key); end

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/util/unmutable_attributes.rb#26
  def key?(key); end

  # @raise [MutationAfterCastError]
  #
  # source://active_type//lib/active_type/util/unmutable_attributes.rb#30
  def method_missing(*args); end

  # Returns the value of attribute original_attributes.
  #
  # source://active_type//lib/active_type/util/unmutable_attributes.rb#12
  def original_attributes; end
end

# source://active_type//lib/active_type/version.rb#2
ActiveType::VERSION = T.let(T.unsafe(nil), String)

# source://active_type//lib/active_type/virtual_attributes.rb#9
module ActiveType::VirtualAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveType::VirtualAttributes::Serialization

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveType::VirtualAttributes::ClassMethods

  # source://active_type//lib/active_type/virtual_attributes.rb#181
  def [](name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#198
  def []=(name, value); end

  # source://active_type//lib/active_type/virtual_attributes.rb#186
  def _read_attribute(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#203
  def _write_attribute(name, value); end

  # source://active_type//lib/active_type/virtual_attributes.rb#215
  def attributes; end

  # @return [Boolean]
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#221
  def changed?; end

  # source://active_type//lib/active_type/virtual_attributes.rb#225
  def changes; end

  # source://active_type//lib/active_type/virtual_attributes.rb#236
  def changes_applied; end

  # Returns the contents of the record as a nicely formatted string.
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#266
  def inspect; end

  # in 6.1, read_attribute does not call _read_attribute
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#193
  def read_attribute(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#165
  def read_existing_virtual_attribute(name, &block_when_not_virtual); end

  # source://active_type//lib/active_type/virtual_attributes.rb#246
  def read_virtual_attribute(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#153
  def virtual_attributes; end

  # source://active_type//lib/active_type/virtual_attributes.rb#161
  def virtual_attributes_cache; end

  # source://active_type//lib/active_type/virtual_attributes.rb#157
  def virtual_attributes_were; end

  # in 6.1, write_attribute does not call _write_attribute
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#210
  def write_attribute(name, value); end

  # source://active_type//lib/active_type/virtual_attributes.rb#173
  def write_existing_virtual_attribute(name, value, &block_when_not_virtual); end

  # source://active_type//lib/active_type/virtual_attributes.rb#259
  def write_virtual_attribute(name, value); end

  private

  # source://active_type//lib/active_type/virtual_attributes.rb#289
  def attribute_names_for_serialization; end

  # source://active_type//lib/active_type/virtual_attributes.rb#145
  def initialize_dup(other); end

  class << self
    # source://active_type//lib/active_type/virtual_attributes.rb#273
    def attribute_for_inspect(value); end

    # source://active_type//lib/active_type/virtual_attributes.rb#122
    def deep_dup(hash); end
  end

  module GeneratedClassMethods
    def virtual_columns_hash; end
    def virtual_columns_hash=(value); end
    def virtual_columns_hash?; end
  end

  module GeneratedInstanceMethods
    def virtual_columns_hash; end
    def virtual_columns_hash=(value); end
    def virtual_columns_hash?; end
  end
end

# source://active_type//lib/active_type/virtual_attributes.rb#47
class ActiveType::VirtualAttributes::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#49
  def initialize(owner, mod); end

  # source://active_type//lib/active_type/virtual_attributes.rb#54
  def build(name, type, options); end

  private

  # source://active_type//lib/active_type/virtual_attributes.rb#65
  def add_virtual_column(name, type, options); end

  # Methods for compatibility with gems expecting the ActiveModel::Dirty API.
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#92
  def build_dirty_tracking_methods(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#71
  def build_reader(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#83
  def build_writer(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#114
  def validate_attribute_name!(name); end
end

# source://active_type//lib/active_type/virtual_attributes.rb#295
module ActiveType::VirtualAttributes::ClassMethods
  # @return [Boolean]
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#317
  def _has_virtual_column?(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#297
  def _virtual_column(name); end

  # source://active_type//lib/active_type/virtual_attributes.rb#307
  def _virtual_column_names; end

  # source://active_type//lib/active_type/virtual_attributes.rb#335
  def at_attribute(name, *args); end

  # source://active_type//lib/active_type/virtual_attributes.rb#327
  def generated_virtual_attribute_methods; end
end

# source://active_type//lib/active_type/virtual_attributes.rb#11
module ActiveType::VirtualAttributes::Serialization
  extend ::ActiveSupport::Concern

  # source://active_type//lib/active_type/virtual_attributes.rb#21
  def encode_with(coder); end

  # source://active_type//lib/active_type/virtual_attributes.rb#14
  def init_with(coder); end
end

# source://active_type//lib/active_type/virtual_attributes.rb#28
class ActiveType::VirtualAttributes::VirtualColumn
  # @return [VirtualColumn] a new instance of VirtualColumn
  #
  # source://active_type//lib/active_type/virtual_attributes.rb#30
  def initialize(name, type_caster, options); end

  # source://active_type//lib/active_type/virtual_attributes.rb#40
  def default_value(object); end

  # source://active_type//lib/active_type/virtual_attributes.rb#36
  def type_cast(value); end
end
