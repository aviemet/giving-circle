# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `decent_exposure` gem.
# Please instead update this file by running `bin/tapioca gem decent_exposure`.

# source://decent_exposure//lib/decent_exposure/version.rb#1
module DecentExposure; end

# source://decent_exposure//lib/decent_exposure/attribute.rb#2
class DecentExposure::Attribute
  # Public: Initialize an Attribute
  #
  # options - Hash of options for the Attribute
  #           :name      - The String name of the Attribute instance
  #           :fetch     - The Proc fetch to calculate
  #                        the value of the Attribute instance.
  #                        This is only called if the attribute's
  #                        instance variable is not defined.
  #           :ivar_name - The String instance variable name that
  #                        is associated with the attribute.
  #
  # @return [Attribute] a new instance of Attribute
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#15
  def initialize(options); end

  # Public: Expose a getter and setter method for the Attribute
  # on the passed in Controller class.
  #
  # klass - The Controller class where the Attribute getter and setter
  # methods will be exposed.
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#40
  def expose!(klass); end

  # Returns the value of attribute fetch.
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#3
  def fetch; end

  # Public: The getter method for the Attribute.
  #
  # Returns the name of the Attribute as a Symbol.
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#24
  def getter_method_name; end

  # Returns the value of attribute ivar_name.
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#3
  def ivar_name; end

  # Returns the value of attribute name.
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#3
  def name; end

  # Public: The setter method for the Attribute.
  #
  # Returns the name of the attribute as a Symbol with an appended '='.
  #
  # source://decent_exposure//lib/decent_exposure/attribute.rb#31
  def setter_method_name; end
end

# source://decent_exposure//lib/decent_exposure/behavior.rb#2
module DecentExposure::Behavior
  # Public: Builds a new object on the passed-in scope.
  #
  # params - A Hash of attributes for the object to-be built.
  # scope  - The collection that will be searched.
  #
  # Returns the new object.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#63
  def build(params, scope); end

  # Public: Get all the parameters of the current request.
  #
  # Returns the controller's parameters for the current request.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#78
  def build_params; end

  # Public: Returns a decorated object. This method is designed to be
  # overridden.
  #
  # Returns the decorated object.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#71
  def decorate(instance); end

  # Public: Fetches a scope.
  #
  # Finds an object. If it isn't found, the object gets instantiated.
  #
  # Returns the decorated object.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#8
  def fetch; end

  # Public: Find an object on the supplied scope.
  #
  # id    - The Integer id attribute of the desired object
  # scope - The collection that will be searched.
  #
  # Returns the found object.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#53
  def find(id, scope); end

  # Public: Checks a params hash for an id attribute.
  #
  # Checks a hash of parameters for keys that represent an object's id.
  #
  # Returns the value of the id parameter, if it exists. Otherwise nil.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#18
  def id; end

  # Public: Converts a name into a standard Class name.
  #
  # Examples
  #   'egg_and_hams'.model # => EggAndHam
  #
  # Returns a standard Class name.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#43
  def model; end

  # Public: An object query. Essentially, this method is designed to be
  # overridden.
  #
  # model - The Class to be scoped or queried.
  #
  # Returns the object scope.
  #
  # source://decent_exposure//lib/decent_exposure/behavior.rb#33
  def scope(model); end

  protected

  # source://decent_exposure//lib/decent_exposure/behavior.rb#96
  def computed_scope; end

  # source://decent_exposure//lib/decent_exposure/behavior.rb#92
  def model_param_key; end

  # source://decent_exposure//lib/decent_exposure/behavior.rb#88
  def params_id_key_candidates; end
end

# source://decent_exposure//lib/decent_exposure/context.rb#2
class DecentExposure::Context
  # Public: Initialize a context.
  #
  # context   - The Class where the attribute is defined.
  # attribute - The attribute that will be accessed by a getter
  #             and setter.
  #
  # @return [Context] a new instance of Context
  #
  # source://decent_exposure//lib/decent_exposure/context.rb#10
  def initialize(context, attribute); end

  # Returns the value of attribute attribute.
  #
  # source://decent_exposure//lib/decent_exposure/context.rb#3
  def attribute; end

  # Returns the value of attribute context.
  #
  # source://decent_exposure//lib/decent_exposure/context.rb#3
  def context; end

  # Public: Read an attribute on the context Class.
  #
  # Get an attribute's value. If the attribute's instance
  # variable is not defined, it will create one,
  # execute attribute#fetch, and assign the result
  # to the instance variable.
  #
  # Returns the attribute's value.
  #
  # source://decent_exposure//lib/decent_exposure/context.rb#22
  def get; end

  # source://decent_exposure//lib/decent_exposure/context.rb#38
  def instance_variable_defined?(*_arg0, **_arg1, &_arg2); end

  # source://decent_exposure//lib/decent_exposure/context.rb#38
  def instance_variable_get(*_arg0, **_arg1, &_arg2); end

  # source://decent_exposure//lib/decent_exposure/context.rb#38
  def instance_variable_set(*_arg0, **_arg1, &_arg2); end

  # Public: Write to an attribute on the context Class.
  #
  # value - The value that will be set to the attribute's
  #         instance variable.
  #
  # Returns the attribute's value.
  #
  # source://decent_exposure//lib/decent_exposure/context.rb#32
  def set(value); end

  private

  # source://decent_exposure//lib/decent_exposure/context.rb#57
  def fetch_value; end

  # @return [Boolean]
  #
  # source://decent_exposure//lib/decent_exposure/context.rb#41
  def ivar_defined?; end

  # source://decent_exposure//lib/decent_exposure/context.rb#45
  def ivar_get; end

  # source://decent_exposure//lib/decent_exposure/context.rb#53
  def ivar_name; end

  # source://decent_exposure//lib/decent_exposure/context.rb#49
  def ivar_set(value); end
end

# source://decent_exposure//lib/decent_exposure/controller.rb#2
module DecentExposure::Controller
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::DecentExposure::Controller::ClassMethods

  module GeneratedClassMethods
    def exposure_configuration; end
    def exposure_configuration=(value); end
  end

  module GeneratedInstanceMethods; end
end

# source://decent_exposure//lib/decent_exposure/controller.rb#10
module DecentExposure::Controller::ClassMethods
  # Public: Exposes an attribute to a controller Class.
  #
  # *args - An Array of attributes for the new exposure. See
  #         Exposure#initialize for attribute details.
  # block - If supplied, the exposed attribute method executes
  #         the Proc when accessed.
  #
  # Returns the helper methods that are now defined on the class
  # where this method is included.
  #
  # source://decent_exposure//lib/decent_exposure/controller.rb#20
  def expose(*args, **options, &block); end

  # Public: Exposes an attribute to a controller Class.
  # The exposed methods are then set to a before_action
  # callback.
  #
  # name  - The String name of the Exposure instance.
  # *args - An Array of attributes for the new exposure. See
  #         Exposure#initialize for attribute details.
  # block - If supplied, the exposed attribute method executes
  #         the Proc when accessed.
  #
  # Sets the exposed attribute to a before_action callback in the
  # controller.
  #
  # source://decent_exposure//lib/decent_exposure/controller.rb#36
  def expose!(name, *args, **options, &block); end

  # Public: Configures an Exposure instance for a controller Class.
  #
  # name    - The String name of the Exposure instance.
  # options - The Hash of options to configure the Exposure instance.
  #
  # Returns the exposure configuration Hash.
  #
  # source://decent_exposure//lib/decent_exposure/controller.rb#47
  def exposure_config(name, options); end
end

# source://decent_exposure//lib/decent_exposure/exposure.rb#2
class DecentExposure::Exposure
  # Public: Initalize an Exposure with a hash of options.
  #
  # If a block is given, the Proc is assigned to value
  # of options[name].
  #
  # The `asserts_*` section raise errors if the controller
  # was initialized with an unacceptable options Hash.
  #
  # controller  - The Controller class where methods will be exposed.
  # name        - The String name of the Exposure instance.
  # fetch_block - Proc that will be executed if the exposed
  #               attribute has no value (default: nil).
  # options     - Hash of options for the Behavior of the exposed methods.
  # block       - If supplied, the exposed attribute method executes
  #               the Proc.
  #
  # Returns a normalized options Hash.
  #
  # @return [Exposure] a new instance of Exposure
  #
  # source://decent_exposure//lib/decent_exposure/exposure.rb#37
  def initialize(controller, name, fetch_block = T.unsafe(nil), **options, &block); end

  # Returns the value of attribute controller.
  #
  # source://decent_exposure//lib/decent_exposure/exposure.rb#3
  def controller; end

  # Public: Creates a getter and setter methods for the attribute.
  # Those methods are made avaiable to the controller as
  # helper methods.
  #
  # Returns a collection of exposed helper methods.
  #
  # source://decent_exposure//lib/decent_exposure/exposure.rb#58
  def expose!; end

  # Returns the value of attribute options.
  #
  # source://decent_exposure//lib/decent_exposure/exposure.rb#3
  def options; end

  private

  # source://decent_exposure//lib/decent_exposure/exposure.rb#191
  def assert_incompatible_options_pair(key1, key2); end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#197
  def assert_singleton_option(name); end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#175
  def attribute; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#65
  def expose_attribute!; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#69
  def expose_helper_methods!; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#167
  def merge_lambda_option(name, body); end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#141
  def normalize_build_params_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#87
  def normalize_fetch_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#93
  def normalize_find_by_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#107
  def normalize_from_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#123
  def normalize_id_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#129
  def normalize_model_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#154
  def normalize_non_proc_option(name); end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#75
  def normalize_options; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#99
  def normalize_parent_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#148
  def normalize_scope_options; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#117
  def normalize_with_option; end

  # source://decent_exposure//lib/decent_exposure/exposure.rb#203
  def reverse_merge_config!(name); end

  class << self
    # Public: Initializes an Exposure and makes it accessible to a controller.
    # For each Exposure, a getter and setter is defined.
    # Those getters and setters are made available to
    # the controller as helper methods.
    #
    # *args  - An Array of all parameters for the new Exposure. See
    #          #initialize.
    # block  - If supplied, the exposed attribute method executes
    #          the Proc when called.
    #
    # Returns a collection of exposed helper methods.
    #
    # source://decent_exposure//lib/decent_exposure/exposure.rb#16
    def expose!(*args, **options, &block); end
  end
end

# source://decent_exposure//lib/decent_exposure/flow.rb#2
class DecentExposure::Flow
  # Public: Initialize a Flow. This object responds to missing
  # methods errors and attempts to delegate them to other objects.
  #
  # controller - The Controller class where the method was called.
  # options    - The options Hash of the Exposure instance being called.
  # name       - The String name of the Exposure instance.
  #
  # @return [Flow] a new instance of Flow
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#11
  def initialize(controller, options); end

  # Returns the value of attribute controller.
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#3
  def controller; end

  # Public: Attempts to re-delegate a method missing to the
  # supplied block or the Behavior object.
  #
  # name  - The String name of the Exposure instance.
  # *args - The arguments given for the missing method.
  # block - The Proc invoked by the method.
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#23
  def method_missing(name, *args, &block); end

  # Returns the value of attribute name.
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#3
  def name; end

  # Returns the value of attribute options.
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#3
  def options; end

  # source://decent_exposure//lib/decent_exposure/flow.rb#42
  def params(*_arg0, **_arg1, &_arg2); end

  private

  # source://decent_exposure//lib/decent_exposure/flow.rb#78
  def fetch_ivar(name); end

  # @return [Boolean]
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#44
  def get_request?; end

  # source://decent_exposure//lib/decent_exposure/flow.rb#73
  def handle_default_flow_method(name, *args, &block); end

  # source://decent_exposure//lib/decent_exposure/flow.rb#52
  def handle_flow_method(name, *args, &block); end

  # source://decent_exposure//lib/decent_exposure/flow.rb#62
  def handle_options_override(name, *args); end

  # source://decent_exposure//lib/decent_exposure/flow.rb#48
  def params_method_name; end

  # Public: Checks if the Behavior class can handle the missing method.
  #
  # method_name     - The name of method that has been called.
  # include_private - Prevents this method from catching calls to private
  # method (default: false).
  #
  # @return [Boolean]
  #
  # source://decent_exposure//lib/decent_exposure/flow.rb#36
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#4
module DecentExposure::Generators; end

# source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#5
class DecentExposure::Generators::ScaffoldTemplatesGenerator < ::Rails::Generators::Base
  # source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#13
  def generate; end

  private

  # source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#30
  def copy_template(generator, file); end

  # source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#34
  def engine; end

  # source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#22
  def generate_controller; end

  # source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#26
  def generate_view(view); end

  # source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#38
  def validate_template_engine; end
end

# source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#11
DecentExposure::Generators::ScaffoldTemplatesGenerator::AVAILABLE_ENGINES = T.let(T.unsafe(nil), Array)

# source://decent_exposure//lib/generators/decent_exposure/scaffold_templates_generator.rb#10
DecentExposure::Generators::ScaffoldTemplatesGenerator::VIEWS = T.let(T.unsafe(nil), Array)

# source://decent_exposure//lib/decent_exposure/mailer.rb#2
module DecentExposure::Mailer
  class << self
    # @private
    #
    # source://decent_exposure//lib/decent_exposure/mailer.rb#3
    def included(base); end
  end
end

# source://decent_exposure//lib/decent_exposure/version.rb#2
DecentExposure::VERSION = T.let(T.unsafe(nil), String)
