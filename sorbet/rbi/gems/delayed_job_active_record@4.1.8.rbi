# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `delayed_job_active_record` gem.
# Please instead update this file by running `bin/tapioca gem delayed_job_active_record`.

# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#4
module Delayed; end

# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#5
module Delayed::Backend; end

# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#6
module Delayed::Backend::ActiveRecord
  class << self
    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#23
    def configuration; end

    # @yield [configuration]
    #
    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#27
    def configure; end
  end
end

# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#7
class Delayed::Backend::ActiveRecord::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#10
  def initialize; end

  # Returns the value of attribute reserve_sql_strategy.
  #
  # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#8
  def reserve_sql_strategy; end

  # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#14
  def reserve_sql_strategy=(val); end
end

# A job object that is persisted to the database.
# Contains the work object as a YAML field.
#
# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#33
class Delayed::Backend::ActiveRecord::Job < ::ActiveRecord::Base
  include ::Delayed::Backend::ActiveRecord::Job::GeneratedAttributeMethods
  include ::Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  include ::Delayed::Backend::Base
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::Delayed::Backend::Base::ClassMethods

  # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#190
  def reload(*args); end

  class << self
    # source://activesupport/7.1.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activemodel/7.1.2/lib/active_model/validations.rb#71
    def _validators; end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#68
    def after_fork; end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#64
    def before_fork; end

    # source://activerecord/7.1.2/lib/active_record/scoping/named.rb#174
    def by_priority(*args, **_arg1); end

    # When a worker is exiting, make sure we don't have any locked jobs.
    #
    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#73
    def clear_locks!(worker_name); end

    # Get the current time (GMT or local depending on DB)
    # Note: This does not ping the DB to get the time, so all your clients
    # must have syncronized clocks.
    #
    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#172
    def db_time_now; end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#182
    def default_timezone; end

    # source://activerecord/7.1.2/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://activerecord/7.1.2/lib/active_record/scoping/named.rb#174
    def for_queues(*args, **_arg1); end

    # source://activerecord/7.1.2/lib/active_record/scoping/named.rb#174
    def max_priority(*args, **_arg1); end

    # source://activerecord/7.1.2/lib/active_record/scoping/named.rb#174
    def min_priority(*args, **_arg1); end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#55
    def ready_to_run(worker_name, max_run_time); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#77
    def reserve(worker, max_run_time = T.unsafe(nil)); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#88
    def reserve_with_scope(ready_scope, worker, now); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#114
    def reserve_with_scope_using_default_sql(ready_scope, worker, now); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#154
    def reserve_with_scope_using_optimized_mssql(ready_scope, worker, now); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#139
    def reserve_with_scope_using_optimized_mysql(ready_scope, worker, now); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#125
    def reserve_with_scope_using_optimized_postgres(ready_scope, worker, now); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#100
    def reserve_with_scope_using_optimized_sql(ready_scope, worker, now); end

    # source://delayed_job_active_record//lib/delayed/backend/active_record.rb#48
    def set_delayed_job_table_name; end
  end
end

# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#0
module Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods; end

# source://delayed_job_active_record//lib/delayed/backend/active_record.rb#0
module Delayed::Backend::ActiveRecord::Job::GeneratedAttributeMethods; end
