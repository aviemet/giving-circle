# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pundit-matchers` gem.
# Please instead update this file by running `bin/tapioca gem pundit-matchers`.

# source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#3
module Pundit
  include ::Pundit::Authorization

  class << self
    # source://pundit/2.3.1/lib/pundit.rb#78
    def authorize(user, possibly_namespaced_record, query, policy_class: T.unsafe(nil), cache: T.unsafe(nil)); end

    # source://pundit/2.3.1/lib/pundit.rb#57
    def included(base); end

    # source://pundit/2.3.1/lib/pundit.rb#139
    def policy(user, record); end

    # source://pundit/2.3.1/lib/pundit.rb#154
    def policy!(user, record); end

    # source://pundit/2.3.1/lib/pundit.rb#98
    def policy_scope(user, scope); end

    # source://pundit/2.3.1/lib/pundit.rb#119
    def policy_scope!(user, scope); end

    private

    # source://pundit/2.3.1/lib/pundit.rb#163
    def pundit_model(record); end
  end
end

# Matchers module provides a set of RSpec matchers for testing Pundit policies.
#
# source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#4
module Pundit::Matchers
  # Creates a matcher that tests if the policy forbids all actions.
  #
  # @note The negative form +not_to forbid_all_actions+ is not supported
  #   since it creates ambiguity. Instead use +to permit_all_actions+.
  # @return [ForbidAllActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#109
  def forbid_all_actions; end

  # Creates a matcher that tests if the policy forbids only a set of actions.
  #
  # @note The negative form +not_to forbid_only_actions+ is not supported
  #   since it creates ambiguity. Instead use +to permit_only_actions+.
  # @param actions [Array<String, Symbol>] the actions to be tested.
  # @return [ForbidOnlyActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#151
  def forbid_only_actions(*actions); end

  # Creates a matcher that tests if the policy permits a given action.
  #
  # @param action [String|Symbol] the action to be tested.
  # @return [PermitActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#71
  def permit_action(action); end

  # Creates a matcher that tests if the policy permits a set of actions.
  #
  # @param actions [Array<String, Symbol>] the actions to be tested.
  # @return [PermitActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#87
  def permit_actions(*actions); end

  # Creates a matcher that tests if the policy permits all actions.
  #
  # @note The negative form +not_to permit_all_actions+ is not supported
  #   since it creates ambiguity. Instead use +to forbid_all_actions+.
  # @return [PermitAllActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#99
  def permit_all_actions; end

  # Creates a matcher that tests if the policy permits mass assignment of an attribute.
  #
  # @param attribute [String, Symbol, Hash] the attribute to be tested.
  # @return [PermitAttributesMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#159
  def permit_attribute(attribute); end

  # Creates a matcher that tests if the policy permits mass assignment of a set of attributes.
  #
  # @param attributes [Array<String, Symbol, Hash>] the attributes to be tested.
  # @return [PermitAttributesMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#169
  def permit_attributes(*attributes); end

  # Creates a matcher that tests if the policy permits the edit and update actions.
  #
  # @return [PermitActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#116
  def permit_edit_and_update_actions; end

  # Creates a matcher that tests if the policy permits the new and create actions.
  #
  # @return [PermitActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#126
  def permit_new_and_create_actions; end

  # Creates a matcher that tests if the policy permits only a set of actions.
  #
  # @note The negative form +not_to permit_only_actions+ is not supported
  #   since it creates ambiguity. Instead use +to forbid_only_actions+.
  # @param actions [Array<String, Symbol>] the actions to be tested.
  # @return [PermitOnlyActionsMatcher] the matcher object.
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#140
  def permit_only_actions(*actions); end

  class << self
    # Returns the configuration object for Pundit Matchers.
    #
    # @return [Configuration] the configuration object.
    #
    # source://pundit-matchers//lib/pundit/matchers.rb#62
    def configuration; end

    # Configures Pundit Matchers.
    #
    # @yieldparam configuration [Configuration] the configuration object to be modified.
    #
    # source://pundit-matchers//lib/pundit/matchers.rb#55
    def configure; end
  end
end

# This is the base action matcher class. Matchers related to actions should inherit from this class.
#
# source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#8
class Pundit::Matchers::ActionsMatcher < ::Pundit::Matchers::BaseMatcher
  # Initializes a new instance of the ActionsMatcher class.
  #
  # @param expected_actions [Array<String, Symbol>] The expected actions to be checked.
  # @raise [ArgumentError] If no actions are specified.
  # @return [ActionsMatcher] a new instance of ActionsMatcher
  #
  # source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#21
  def initialize(*expected_actions); end

  # Ensures that only one action is specified.
  #
  # @raise [ArgumentError] If more than one action is specified.
  # @return [ActionsMatcher] The object itself.
  #
  # source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#33
  def ensure_single_action!; end

  private

  # @raise [ArgumentError]
  #
  # source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#43
  def check_actions!; end

  # Returns the value of attribute expected_actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#41
  def expected_actions; end
end

# Error message when actions are not implemented in a policy.
#
# source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#10
Pundit::Matchers::ActionsMatcher::ACTIONS_NOT_IMPLEMENTED_ERROR = T.let(T.unsafe(nil), String)

# Error message when at least one action must be specified.
#
# source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#12
Pundit::Matchers::ActionsMatcher::ARGUMENTS_REQUIRED_ERROR = T.let(T.unsafe(nil), String)

# Error message when only one action may be specified.
#
# source://pundit-matchers//lib/pundit/matchers/actions_matcher.rb#14
Pundit::Matchers::ActionsMatcher::ONE_ARGUMENT_REQUIRED_ERROR = T.let(T.unsafe(nil), String)

# The AttributesMatcher class is used to test whether a Pundit policy allows or denies access to certain attributes.
#
# source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#8
class Pundit::Matchers::AttributesMatcher < ::Pundit::Matchers::BaseMatcher
  # Initializes a new instance of the AttributesMatcher class.
  #
  # @param expected_attributes [Array<String, Symbol, Hash>] The list of attributes to be tested.
  # @raise [ArgumentError]
  # @return [AttributesMatcher] a new instance of AttributesMatcher
  #
  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#17
  def initialize(*expected_attributes); end

  # Ensures that only one attribute is specified.
  #
  # @raise [ArgumentError] If more than one attribute is specified.
  # @return [AttributesMatcher] The object itself.
  #
  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#39
  def ensure_single_attribute!; end

  # Specifies the action to be tested.
  #
  # @param action [Symbol, String] The action to be tested.
  # @return [AttributesMatcher] The current instance of the AttributesMatcher class.
  #
  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#29
  def for_action(action); end

  private

  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#58
  def action_message; end

  # Returns the value of attribute expected_attributes.
  #
  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#47
  def expected_attributes; end

  # Flattens and sorts a hash or array of attributes into an array of symbols.
  #
  # This is a private method used internally by the `Matcher` class to convert
  # attribute lists into a flattened, sorted array of symbols. The resulting
  # array can be used to compare attribute lists.
  #
  # @param attributes [String, Symbol, Array, Hash] the attributes to be flattened.
  # @return [Array<Symbol>] the flattened, sorted array of symbols.
  #
  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#70
  def flatten_attributes(attributes); end

  # Returns the value of attribute options.
  #
  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#47
  def options; end

  # source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#49
  def permitted_attributes(policy); end
end

# Error message to be raised when no attributes are specified.
#
# source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#10
Pundit::Matchers::AttributesMatcher::ARGUMENTS_REQUIRED_ERROR = T.let(T.unsafe(nil), String)

# Error message to be raised when only one attribute may be specified.
#
# source://pundit-matchers//lib/pundit/matchers/attributes_matcher.rb#12
Pundit::Matchers::AttributesMatcher::ONE_ARGUMENT_REQUIRED_ERROR = T.let(T.unsafe(nil), String)

# This is the base class for all matchers in the Pundit Matchers library.
#
# source://pundit-matchers//lib/pundit/matchers/base_matcher.rb#8
class Pundit::Matchers::BaseMatcher
  include ::RSpec::Matchers::Composable

  private

  # Returns the value of attribute policy_info.
  #
  # source://pundit-matchers//lib/pundit/matchers/base_matcher.rb#18
  def policy_info; end

  # source://pundit-matchers//lib/pundit/matchers/base_matcher.rb#20
  def setup_policy_info!(policy); end

  # source://pundit-matchers//lib/pundit/matchers/base_matcher.rb#24
  def user_message; end
end

# Error message when an ambiguous negated matcher is used.
#
# source://pundit-matchers//lib/pundit/matchers/base_matcher.rb#12
Pundit::Matchers::BaseMatcher::AMBIGUOUS_NEGATED_MATCHER_ERROR = T.let(T.unsafe(nil), String)

# Configuration class for Pundit Matchers.
#
# source://pundit-matchers//lib/pundit/matchers.rb#22
class Pundit::Matchers::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#38
  def initialize; end

  # The default user object in policies.
  #
  # @return [Symbol|String]
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#28
  def default_user_alias; end

  # The default user object in policies.
  #
  # @return [Symbol|String]
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#28
  def default_user_alias=(_arg0); end

  # Returns the user object for the given policy.
  #
  # @return [Symbol]
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#46
  def user_alias(policy); end

  # Policy-specific user objects.
  #
  # @example Use +:client+ as user alias for class +Post+
  #   config.user_aliases = { 'Post' => :client }
  # @return [Hash]
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#36
  def user_aliases; end

  # Policy-specific user objects.
  #
  # @example Use +:client+ as user alias for class +Post+
  #   config.user_aliases = { 'Post' => :client }
  # @return [Hash]
  #
  # source://pundit-matchers//lib/pundit/matchers.rb#36
  def user_aliases=(_arg0); end
end

# The default user object value
#
# source://pundit-matchers//lib/pundit/matchers.rb#24
Pundit::Matchers::Configuration::DEFAULT_USER_ALIAS = T.let(T.unsafe(nil), Symbol)

# This matcher tests whether a policy forbids all actions.
#
# source://pundit-matchers//lib/pundit/matchers/forbid_all_actions_matcher.rb#8
class Pundit::Matchers::ForbidAllActionsMatcher < ::Pundit::Matchers::BaseMatcher
  # A description of the matcher.
  #
  # @return [String] Description of the matcher.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_all_actions_matcher.rb#12
  def description; end

  # Raises a NotImplementedError
  #
  # @raise NotImplementedError
  # @return [void]
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_all_actions_matcher.rb#29
  def does_not_match?(_policy); end

  # Returns a failure message if the matcher fails.
  #
  # @return [String] Failure message.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_all_actions_matcher.rb#36
  def failure_message; end

  # Checks if the given policy forbids all actions.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy forbids all actions, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_all_actions_matcher.rb#20
  def matches?(policy); end
end

# This matcher tests whether a policy forbids only the expected actions.
#
# source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#8
class Pundit::Matchers::ForbidOnlyActionsMatcher < ::Pundit::Matchers::ActionsMatcher
  # A description of the matcher.
  #
  # @return [String] Description of the matcher.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#12
  def description; end

  # Raises a NotImplementedError
  #
  # @raise NotImplementedError
  # @return [void]
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#33
  def does_not_match?(_policy); end

  # The failure message when the expected actions and the forbidden actions do not match.
  #
  # @return [String] A failure message when the expected actions and the forbidden actions do not match.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#40
  def failure_message; end

  # Checks if the given policy forbids only the expected actions.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy forbids only the expected actions, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#20
  def matches?(policy); end

  private

  # Returns the value of attribute actual_actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#49
  def actual_actions; end

  # Returns the value of attribute extra_actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#49
  def extra_actions; end

  # source://pundit-matchers//lib/pundit/matchers/forbid_only_actions_matcher.rb#51
  def extra_message; end
end

# A Proc that negates the description of a matcher.
#
# source://pundit-matchers//lib/pundit/matchers.rb#19
Pundit::Matchers::NEGATED_DESCRIPTION = T.let(T.unsafe(nil), Proc)

# This matcher tests whether a policy permits or forbids the expected actions.
#
# source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#8
class Pundit::Matchers::PermitActionsMatcher < ::Pundit::Matchers::ActionsMatcher
  # A description of the matcher.
  #
  # @return [String] Description of the matcher.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#12
  def description; end

  # Checks if the given policy forbids the expected actions.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy forbids the expected actions, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#35
  def does_not_match?(policy); end

  # Returns a failure message when the expected actions are forbidden.
  #
  # @return [String] A failure message when the expected actions are not forbidden.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#49
  def failure_message; end

  # Returns a failure message when the expected actions are permitted.
  #
  # @return [String] A failure message when the expected actions are permitted.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#58
  def failure_message_when_negated; end

  # Checks if the given policy permits the expected actions.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy permits the expected actions, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#20
  def matches?(policy); end

  private

  # Returns the value of attribute actual_actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_actions_matcher.rb#66
  def actual_actions; end
end

# This matcher tests whether a policy permits all actions.
#
# source://pundit-matchers//lib/pundit/matchers/permit_all_actions_matcher.rb#8
class Pundit::Matchers::PermitAllActionsMatcher < ::Pundit::Matchers::BaseMatcher
  # A description of the matcher.
  #
  # @return [String] A description of the matcher.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_all_actions_matcher.rb#12
  def description; end

  # Raises a NotImplementedError
  #
  # @raise NotImplementedError
  # @return [void]
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_all_actions_matcher.rb#29
  def does_not_match?(_policy); end

  # Returns a failure message when the policy does not permit all actions.
  #
  # @return [String] A failure message when the policy does not permit all actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_all_actions_matcher.rb#36
  def failure_message; end

  # Checks if the given policy permits all actions.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy permits all actions, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_all_actions_matcher.rb#20
  def matches?(policy); end
end

# This matcher tests whether a policy permits or forbids the mass assignment of the expected attributes.
#
# source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#8
class Pundit::Matchers::PermitAttributesMatcher < ::Pundit::Matchers::AttributesMatcher
  # A description of the matcher.
  #
  # @return [String] A description of the matcher.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#12
  def description; end

  # Checks if the given policy forbids the mass assignment of the expected attributes.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy forbids the mass assignment of the expected attributes, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#32
  def does_not_match?(policy); end

  # The failure message when the expected attributes are forbidden.
  #
  # @return [String] A failure message when the expected attributes are not permitted.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#43
  def failure_message; end

  # The failure message when the expected attributes are permitted.
  #
  # @return [String] A failure message when the expected attributes are forbidden.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#53
  def failure_message_when_negated; end

  # Checks if the given policy permits the mass assignment of the expected attributes.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy permits the mass assignment of the expected attributes, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#20
  def matches?(policy); end

  private

  # Returns the value of attribute actual_attributes.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_attributes_matcher.rb#62
  def actual_attributes; end
end

# This matcher tests whether a policy permits only the expected actions.
#
# source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#8
class Pundit::Matchers::PermitOnlyActionsMatcher < ::Pundit::Matchers::ActionsMatcher
  # A description of the matcher.
  #
  # @return [String] A description of the matcher.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#12
  def description; end

  # Raises a NotImplementedError
  #
  # @raise NotImplementedError
  # @return [void]
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#33
  def does_not_match?(_policy); end

  # The failure message when the expected actions and the permitted actions do not match.
  #
  # @return [String] A failure message when the expected actions and the permitted actions do not match.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#40
  def failure_message; end

  # Checks if the given policy permits only the expected actions.
  #
  # @param policy [Object] The policy to test.
  # @return [Boolean] True if the policy permits only the expected actions, false otherwise.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#20
  def matches?(policy); end

  private

  # Returns the value of attribute actual_actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#49
  def actual_actions; end

  # Returns the value of attribute extra_actions.
  #
  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#49
  def extra_actions; end

  # source://pundit-matchers//lib/pundit/matchers/permit_only_actions_matcher.rb#51
  def extra_message; end
end

# source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#5
module Pundit::Matchers::Utils; end

# This class provides methods to retrieve information about a policy class,
# such as the actions it defines and which of those actions are permitted
# or forbidden. It also provides a string representation of the policy class name
# and the user object associated with the policy.
#
# source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#10
class Pundit::Matchers::Utils::PolicyInfo
  # Initializes a new instance of PolicyInfo.
  #
  # @param policy [Class] The policy class to collect details about.
  # @return [PolicyInfo] a new instance of PolicyInfo
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#30
  def initialize(policy); end

  # Returns an array of all actions defined in the policy class.
  #
  # It assumes that actions are defined as public instance methods that end with a question mark.
  #
  # @return [Array<Symbol>] An array of all actions defined in the policy class.
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#54
  def actions; end

  # Returns an array of all forbidden actions defined in the policy class.
  #
  # @return [Array<Symbol>] An array of all forbidden actions defined in the policy class.
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#70
  def forbidden_actions; end

  # Returns an array of all permitted actions defined in the policy class.
  #
  # @return [Array<Symbol>] An array of all permitted actions defined in the policy class.
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#63
  def permitted_actions; end

  # Returns the value of attribute policy.
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#25
  def policy; end

  # Returns a string representation of the policy class name.
  #
  # @return [String] A string representation of the policy class name.
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#38
  def to_s; end

  # Returns the user object associated with the policy.
  #
  # @return [Object] The user object associated with the policy.
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#45
  def user; end

  private

  # @raise [ArgumentError]
  #
  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#84
  def check_user_alias!; end

  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#76
  def policy_public_methods; end

  # source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#80
  def user_alias; end
end

# Error message when policy does not respond to `user_alias`.
#
# source://pundit-matchers//lib/pundit/matchers/utils/policy_info.rb#12
Pundit::Matchers::Utils::PolicyInfo::USER_NOT_IMPLEMENTED_ERROR = T.let(T.unsafe(nil), String)
