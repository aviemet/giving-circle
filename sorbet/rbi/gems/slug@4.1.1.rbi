# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `slug` gem.
# Please instead update this file by running `bin/tapioca gem slug`.

class ActiveRecord::Base
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  include ::Slug
  include ::JsonbAccessor::Macro
  extend ::Slug::ClassMethods
end

# source://slug//lib/slug/slug.rb#3
module Slug
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Slug::ClassMethods
end

# source://slug//lib/slug/slug.rb#0
module Slug::ClassMethods
  # source://slug//lib/slug/slug.rb#22
  def slug(source, opts = T.unsafe(nil)); end
end

# source://slug//lib/slug/slug.rb#44
module Slug::SlugInstanceMethods
  # Overwrite existing slug based on current contents of source column.
  #
  # source://slug//lib/slug/slug.rb#62
  def reset_slug; end

  # Sets the slug. Called before create.
  # By default, set_slug won't change slug if one already exists.  Pass :force => true to overwrite.
  #
  # source://slug//lib/slug/slug.rb#47
  def set_slug(opts = T.unsafe(nil)); end

  # Overrides to_param to return the model's slug.
  #
  # source://slug//lib/slug/slug.rb#67
  def to_param; end

  private

  # If a slug of the same name already exists, this will append '-n' to the end of the slug to
  # make it unique. The second instance gets a '-1' suffix.
  #
  # source://slug//lib/slug/slug.rb#89
  def assign_slug_sequence; end

  # Takes the slug, downcases it and replaces non-word characters with a -.
  # Feel free to override this method if you'd like different slug formatting.
  #
  # source://slug//lib/slug/slug.rb#81
  def normalize_slug(str); end

  # Validates that source and destination methods exist. Invoked at runtime to allow definition
  # of source/slug methods after <tt>slug</tt> setup in class.
  #
  # @raise [ArgumentError]
  #
  # source://slug//lib/slug/slug.rb#74
  def validate_slug_columns; end
end
